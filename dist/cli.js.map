{"mappings":";;;;;;;;;;;;;ACAA,4BAAiB,KAAK,MAAM;;;ACErB,MAAM,4CAAO,CAAC,QACnB,IAAI,QAAQ,CAAA;QACV,IAAI,UAAU,MAAM;QACpB,MAAM,WAAW,CAAC,GAAG;YACnB,IAAI,EAAE,YAAY,GAChB,QAAQ;QAEZ;QACA,MAAM,QAAQ,CAAA;YACZ,EAAE,KAAK,UAAU;QACnB;QAEA,0BAA0B;QAC1B,MAAM,aAAa,YAAY;YAC7B,IAAI,MAAM,MAAM,CAAA,IAAK,EAAE,aAAa,OAAO;gBACzC,cAAc;gBACd,QAAQ;YACV;QACF,GAAG;IACL;;;AFHF,MAAM,QAAE,2BAAI,EAAE,GAAG,CAAA,GAAA,YAAI,EAAE,QAAQ,KAAK,MAAM,IACvC,QAAQ,CAAA,GAAA,iCAAM,GACd,OAAO,MACP,OAAO,YAAY;IAClB,OAAO;IACP,cAAc;IACd,UACE;IACF,QAAQ;IACR,OAAO;AACT;AACF,MAAM,YAAE,+BAAQ,EAAE,GAAG,MAAM;AAE3B,MAAM,qCAIF;IACF,OAAO;QAAC;QAAU;QAAQ;KAAO;IACjC,OAAO;AACT;AACA,MAAM,8BAAQ,+BACX,IAAI,CAAA,MAAO,IAAI,MAAM,MACrB,IAAI,CAAC,CAAC,KAAK,GAAG,KAAK,GAAK,CAAA,GAAA,YAAI,EAAE,KAAK,MAAM;AAE5C,IAAI;IACF,CAAA,GAAA,eAAO,EAAE;QACP,CAAA,GAAA,kBAAC,EAAE,MAAM,4BAAM,IAAI,CAAA,OAAQ,KAAK;QAChC,CAAA,GAAA,eAAO;QACP,QAAQ;KACT,EAAE,MAAM,CAAA;QACP,QAAQ,MAAM,qCAAqC;IACrD;IACA,MAAM,CAAA,GAAA,yCAAG,EAAE;AACb,EAAE,OAAO,GAAG;IACV,QAAQ,MAAM,4BAA4B;IAC1C,QAAQ,KAAK;AACf,SAAU;IACR,QAAQ,KAAK;AACf","sources":["src/cli.ts","package.json","src/wait.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport {\n  StdioNull,\n  SpawnOptionsWithStdioTuple,\n  StdioPipe,\n  spawn,\n} from 'child_process'\nimport { pipeline } from 'stream/promises'\n\nimport es from 'event-stream'\nimport tapMerge from 'tap-merge'\nimport yargs from 'yargs'\n\nimport { version } from '../package.json'\n\nimport { wait } from './wait'\n\nconst { argv } = yargs(process.argv.slice(2))\n  .version(version)\n  .locale('en')\n  .option('producer', {\n    alias: 'p',\n    demandOption: true,\n    describe:\n      'Executable of TAP stream producer. Could be used more than one time.',\n    string: true,\n    array: true,\n  })\nconst { producer } = await argv\n\nconst spawnOptions: SpawnOptionsWithStdioTuple<\n  StdioNull,\n  StdioPipe,\n  StdioPipe\n> = {\n  stdio: ['ignore', 'pipe', 'pipe'],\n  shell: true,\n}\nconst tasks = producer\n  .map(cmd => cmd.split(' '))\n  .map(([cmd, ...args]) => spawn(cmd, args, spawnOptions))\n\ntry {\n  pipeline([\n    es.merge(tasks.map(proc => proc.stdout)),\n    tapMerge(),\n    process.stdout,\n  ]).catch(e => {\n    console.error('@@ tmerge pipeline error occured.', e)\n  })\n  await wait(tasks)\n} catch (e) {\n  console.error('@@ tmerge error occured.', e)\n  process.exit(2)\n} finally {\n  process.exit(0)\n}\n","{\n  \"name\": \"@tap-ogg/tap-merge\",\n  \"type\": \"module\",\n  \"version\": \"1.1.0\",\n  \"main\": \"dist/cli.js\",\n  \"author\": \"Marek JÄ™dryka\",\n  \"license\": \"MIT\",\n  \"private\": false,\n  \"repository\": \"github:marek629/tap-merge\",\n  \"files\": [\n    \"CHANGELOG.md\",\n    \"dist/*\",\n    \"src/*\"\n  ],\n  \"engines\": {\n    \"node\": \">= 12\"\n  },\n  \"keywords\": [\n    \"test\",\n    \"testing\",\n    \"tap\",\n    \"cli\",\n    \"stream\",\n    \"merging\",\n    \"merge\"\n  ],\n  \"devDependencies\": {\n    \"@types/node\": \"^20.2.3\",\n    \"@types/yargs\": \"^17.0.24\",\n    \"ava\": \"^5.3.0\",\n    \"bats\": \"^1.9.0\",\n    \"c8\": \"^8.0.0\",\n    \"parcel\": \"^2.9.1\",\n    \"prettier\": \"^2.8.8\",\n    \"typescript\": \"^5.0.4\"\n  },\n  \"dependencies\": {\n    \"event-stream\": \"^4.0.1\",\n    \"tap-merge\": \"^0.3.1\",\n    \"yargs\": \"^17.7.2\"\n  },\n  \"bin\": {\n    \"tap-merge\": \"dist/cli.js\",\n    \"tmerge\": \"dist/cli.js\"\n  },\n  \"scripts\": {\n    \"prebuild\": \"prettier --write src/ test/\",\n    \"build\": \"parcel build src/cli.ts\",\n    \"postbuild\": \"chmod +x dist/cli.js\",\n    \"watch\": \"parcel watch src/cli.ts\",\n    \"pretest\": \"bash -xe tools/pretest.sh\",\n    \"test\": \"yarn test:integration\",\n    \"test:integration\": \"bats test/*.bats --timing --trace --print-output-on-failure\",\n    \"precoverage\": \"rm -rf coverage\",\n    \"coverage\": \"c8 --check-coverage --lines 0 --statements 0 --functions 0 --branches 80 yarn test\"\n  },\n  \"ava\": {\n    \"files\": [\n      \"!**/(massive|passing|skipping).*\"\n    ]\n  },\n  \"c8\": {\n    \"all\": true,\n    \"src\": \"src\",\n    \"exclude\": [\n      \"**/*.test.js\"\n    ],\n    \"reporter\": [\n      \"html\",\n      \"lcov\",\n      \"text-summary\"\n    ]\n  }\n}\n","import { ProcessArray } from './types'\n\nexport const wait = (tasks: ProcessArray): Promise<ProcessArray> =>\n  new Promise(resolve => {\n    let counter = tasks.length\n    const listener = (...args) => {\n      if (--counter === 0) {\n        resolve(tasks)\n      }\n    }\n    tasks.forEach(t => {\n      t.once('finish', listener)\n    })\n\n    // fallback checking tasks\n    const intervalId = setInterval(function () {\n      if (tasks.every(t => t.exitCode !== null)) {\n        clearInterval(intervalId)\n        resolve(tasks)\n      }\n    }, 500)\n  })\n"],"names":[],"version":3,"file":"cli.js.map","sourceRoot":"../"}